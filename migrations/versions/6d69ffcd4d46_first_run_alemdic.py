"""first run alemdic

Revision ID: 6d69ffcd4d46
Revises: 
Create Date: 2023-02-24 10:43:15.705711

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '6d69ffcd4d46'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('category',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('value', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('begins', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ends', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('category_idx', 'category', ['category', 'code'], unique=True)
    op.create_index(op.f('ix_category_category'), 'category', ['category'], unique=False)
    op.create_index(op.f('ix_category_code'), 'category', ['code'], unique=False)
    op.create_table('data',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('table', sa.String(), nullable=True),
    sa.Column('object', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('hash', sa.String(), nullable=True),
    sa.Column('algorithm', sa.String(), nullable=True),
    sa.Column('content', postgresql.BYTEA(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('begins', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ends', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('data_object_idx', 'data', ['table', 'object', 'code', 'algorithm', 'hash'], unique=False)
    op.create_index(op.f('ix_data_code'), 'data', ['code'], unique=False)
    op.create_table('property',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('table', sa.String(), nullable=True),
    sa.Column('object', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('value', sa.String(), nullable=True),
    sa.Column('value_int', sa.Integer(), nullable=True),
    sa.Column('value_dec', sa.Numeric(), nullable=True),
    sa.Column('value_dt', sa.DateTime(timezone=True), nullable=True),
    sa.Column('begins', sa.DateTime(timezone=True), nullable=False),
    sa.Column('ends', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('obj_idx', 'property', ['table', 'name', 'object'], unique=False)
    op.create_index('val_dec_idx', 'property', ['table', 'name', 'value_dec'], unique=False)
    op.create_index('val_dt_idx', 'property', ['table', 'name', 'value_dt'], unique=False)
    op.create_index('val_idx', 'property', ['table', 'name', 'value'], unique=False)
    op.create_index('val_int_idx', 'property', ['table', 'name', 'value_int'], unique=False)
    op.create_table('relation',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('src', sa.String(), nullable=True),
    sa.Column('src_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('trg', sa.String(), nullable=True),
    sa.Column('trg_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('begins', sa.DateTime(timezone=True), nullable=False),
    sa.Column('ends', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_relation_code'), 'relation', ['code'], unique=False)
    op.create_index('name_src_idx', 'relation', ['code', 'src', 'trg', 'src_id'], unique=True)
    op.create_index('name_trg_idx', 'relation', ['code', 'src', 'trg', 'trg_id'], unique=True)
    op.create_table('currency',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('category', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('begins', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ends', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['category'], ['category.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('account_idx', 'currency', ['category', 'code'], unique=False)
    op.create_index(op.f('ix_currency_code'), 'currency', ['code'], unique=False)
    op.create_table('entity',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('category', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('value', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('begins', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ends', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['category'], ['category.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_entity_code'), 'entity', ['code'], unique=False)
    op.create_index('name_code_idx', 'entity', ['category', 'code'], unique=False)
    op.create_table('state',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('category', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('state', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('value', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('begins', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ends', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['category'], ['category.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_state_code'), 'state', ['code'], unique=False)
    op.create_index('state_idx', 'state', ['category', 'code'], unique=False)
    op.create_table('account',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('category', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('issuer', sa.String(), nullable=True),
    sa.Column('issuer_table', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('currency', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('begins', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ends', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['category'], ['category.id'], ),
    sa.ForeignKeyConstraint(['currency'], ['currency.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('account_idx', 'account', ['category', 'code'], unique=False)
    op.create_index(op.f('ix_account_code'), 'account', ['code'], unique=False)
    op.create_index(op.f('ix_account_issuer'), 'account', ['issuer'], unique=False)
    op.create_table('country',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('currency', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('begins', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ends', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['currency'], ['currency.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_country_code'), 'country', ['code'], unique=False)
    op.create_table('company',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('country', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('begins', sa.Date(), nullable=False),
    sa.Column('ends', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['country'], ['country.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('company_num_idx', 'company', ['country', 'code'], unique=False)
    op.create_index(op.f('ix_company_code'), 'company', ['code'], unique=False)
    op.create_table('document',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('category', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('country', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('issuer', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('issuer_table', sa.String(), nullable=True),
    sa.Column('series', sa.String(), nullable=True),
    sa.Column('number', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('issue', sa.Date(), nullable=False),
    sa.Column('expire', sa.Date(), nullable=True),
    sa.Column('begins', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ends', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['category'], ['category.id'], ),
    sa.ForeignKeyConstraint(['country'], ['country.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('document_idx', 'document', ['category', 'code', 'issuer', 'issuer_table'], unique=False)
    op.create_index(op.f('ix_document_code'), 'document', ['code'], unique=False)
    op.create_index(op.f('ix_document_issuer'), 'document', ['issuer'], unique=False)
    op.create_table('operation',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('category', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('number', sa.String(), nullable=True),
    sa.Column('debit', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('credit', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('amount', sa.Numeric(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('begins', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ends', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['category'], ['category.id'], ),
    sa.ForeignKeyConstraint(['credit'], ['account.id'], ),
    sa.ForeignKeyConstraint(['debit'], ['account.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_operation_code'), 'operation', ['code'], unique=False)
    op.create_index('operation_cr_idx', 'operation', ['category', 'code', 'credit', 'number', 'begins'], unique=False)
    op.create_index('operation_db_idx', 'operation', ['category', 'code', 'debit', 'number', 'begins'], unique=False)
    op.create_index('operation_idx', 'operation', ['category', 'code', 'debit', 'credit', 'begins'], unique=False)
    op.create_table('place',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('category', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('country', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('begins', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ends', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['category'], ['category.id'], ),
    sa.ForeignKeyConstraint(['country'], ['country.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_place_code'), 'place', ['code'], unique=False)
    op.create_index('place_idx', 'place', ['category', 'code', 'country'], unique=False)
    op.create_table('address',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('country', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('region', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('place', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('postcode', sa.String(), nullable=True),
    sa.Column('street', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('building', sa.String(), nullable=True),
    sa.Column('apartment', sa.String(), nullable=True),
    sa.Column('begins', sa.Date(), nullable=False),
    sa.Column('ends', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['country'], ['country.id'], ),
    sa.ForeignKeyConstraint(['place'], ['place.id'], ),
    sa.ForeignKeyConstraint(['region'], ['place.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('address_idx', 'address', ['country', 'region', 'place', 'postcode', 'street'], unique=False)
    op.create_table('person',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name_first', sa.String(), nullable=False),
    sa.Column('name_last', sa.String(), nullable=False),
    sa.Column('name_third', sa.String(), nullable=True),
    sa.Column('birthdate', sa.Date(), nullable=False),
    sa.Column('birth_place', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['birth_place'], ['place.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('name_birth_idx', 'person', ['name_first', 'name_last', 'name_third', 'birthdate', 'birth_place'], unique=False)
    op.create_table('message',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('category', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('code', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('sender', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('receiver', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('content', sa.String(), nullable=True),
    sa.Column('begins', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ends', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['category'], ['category.id'], ),
    sa.ForeignKeyConstraint(['receiver'], ['person.id'], ),
    sa.ForeignKeyConstraint(['sender'], ['person.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_message_code'), 'message', ['code'], unique=False)
    op.create_table('user',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('passhash', sa.String(), nullable=True),
    sa.Column('begins', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ends', sa.DateTime(timezone=True), nullable=True),
    sa.Column('person_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.ForeignKeyConstraint(['person_id'], ['person.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_message_code'), table_name='message')
    op.drop_table('message')
    op.drop_index('name_birth_idx', table_name='person')
    op.drop_table('person')
    op.drop_index('address_idx', table_name='address')
    op.drop_table('address')
    op.drop_index('place_idx', table_name='place')
    op.drop_index(op.f('ix_place_code'), table_name='place')
    op.drop_table('place')
    op.drop_index('operation_idx', table_name='operation')
    op.drop_index('operation_db_idx', table_name='operation')
    op.drop_index('operation_cr_idx', table_name='operation')
    op.drop_index(op.f('ix_operation_code'), table_name='operation')
    op.drop_table('operation')
    op.drop_index(op.f('ix_document_issuer'), table_name='document')
    op.drop_index(op.f('ix_document_code'), table_name='document')
    op.drop_index('document_idx', table_name='document')
    op.drop_table('document')
    op.drop_index(op.f('ix_company_code'), table_name='company')
    op.drop_index('company_num_idx', table_name='company')
    op.drop_table('company')
    op.drop_index(op.f('ix_country_code'), table_name='country')
    op.drop_table('country')
    op.drop_index(op.f('ix_account_issuer'), table_name='account')
    op.drop_index(op.f('ix_account_code'), table_name='account')
    op.drop_index('account_idx', table_name='account')
    op.drop_table('account')
    op.drop_index('state_idx', table_name='state')
    op.drop_index(op.f('ix_state_code'), table_name='state')
    op.drop_table('state')
    op.drop_index('name_code_idx', table_name='entity')
    op.drop_index(op.f('ix_entity_code'), table_name='entity')
    op.drop_table('entity')
    op.drop_index(op.f('ix_currency_code'), table_name='currency')
    op.drop_index('account_idx', table_name='currency')
    op.drop_table('currency')
    op.drop_index('name_trg_idx', table_name='relation')
    op.drop_index('name_src_idx', table_name='relation')
    op.drop_index(op.f('ix_relation_code'), table_name='relation')
    op.drop_table('relation')
    op.drop_index('val_int_idx', table_name='property')
    op.drop_index('val_idx', table_name='property')
    op.drop_index('val_dt_idx', table_name='property')
    op.drop_index('val_dec_idx', table_name='property')
    op.drop_index('obj_idx', table_name='property')
    op.drop_table('property')
    op.drop_index(op.f('ix_data_code'), table_name='data')
    op.drop_index('data_object_idx', table_name='data')
    op.drop_table('data')
    op.drop_index(op.f('ix_category_code'), table_name='category')
    op.drop_index(op.f('ix_category_category'), table_name='category')
    op.drop_index('category_idx', table_name='category')
    op.drop_table('category')
    # ### end Alembic commands ###
